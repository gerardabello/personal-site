{"version":3,"sources":["webpack:///./src/physics-background.js"],"names":["Root","styled","div","Background","gravityX","gravityY","gravity","setGravity","useState","useEffect","handleMotion","event","y","accelerationIncludingGravity","x","window","addEventListener","removeEventListener","useGravity","engineRef","useRef","rootRef","current","world","element","width","innerWidth","height","innerHeight","Render","Matter","World","Bodies","engine","Engine","create","render","options","wireframes","background","shapes","rectangle","density","friction","fillStyle","lineWidth","ground","isStatic","topGround","leftGround","rightGround","add","run","createEngine","ref"],"mappings":"yFAAA,mDAIA,MAAMA,EAAOC,IAAOC,GAAI;;;;;;;;;EAoJTC,UAlBI,KACjB,MAAOC,EAAUC,GApBA,MACjB,MAAOC,EAASC,GAAcC,mBAAS,CAAC,EAAG,IAe3C,OAbAC,oBAAU,KACR,MAAMC,EAAgBC,IACpB,MAAMC,EAAID,EAAME,6BAA6BD,EACvCE,GAAKH,EAAME,6BAA6BC,EAC9CP,EAAW,CAACO,EAAGF,KAIjB,OADAG,OAAOC,iBAAiB,eAAgBN,GAAc,GAC/C,KACLK,OAAOE,oBAAoB,eAAgBP,KAE5C,IAEIJ,GAIsBY,GACvBC,EAAYC,mBACZC,EAAUD,mBAYhB,OAVID,EAAUG,UACZH,EAAUG,QAAQC,MAAMjB,QAAQM,EAAIP,EAAW,EAC/Cc,EAAUG,QAAQC,MAAMjB,QAAQQ,EAAIV,EAAW,GAGjDK,oBAAU,KACRU,EAAUG,QAlIQE,KACpB,MAAMC,EAAQV,OAAOW,WACfC,EAASZ,OAAOa,YAGhBC,EAASC,IAAOD,OAChBE,EAAQD,IAAOC,MACfC,EAASF,IAAOE,OAGhBC,EAASH,IAAOI,OAAOC,SAGvBC,EAASP,EAAOM,OAAO,CAC3BX,UACAS,OAAQA,EACRI,QAAS,CACPC,YAAY,EACZb,QACAE,SACAY,WAAY,aAQVC,EAAS,CAEbR,EAAOS,UAAUhB,EAAQ,EAAI,GAAI,GAAI,IAAK,IAAK,CAC7CiB,QAAS,GACTC,SARa,GASbP,OAAQ,CACNQ,UARW,UASXC,UAAW,KAGfb,EAAOS,UAAUhB,EAAQ,EAAI,GAAI,IAAK,GAAI,GAAI,CAC5CiB,QAAS,GACTC,SAhBa,GAiBbP,OAAQ,CACNQ,UAhBW,UAiBXC,UAAW,KAGfb,EAAOS,UAAUhB,EAAQ,EAAI,GAAI,IAAK,GAAI,GAAI,CAC5CiB,QAAS,GACTC,SAxBa,GAyBbP,OAAQ,CACNQ,UAxBW,UAyBXC,UAAW,KAIfb,EAAOS,UAAUhB,EAAQ,EAAI,GAAI,IAAK,IAAK,IAAK,CAC9CiB,QAAS,GACTC,SAjCa,GAkCbP,OAAQ,CACNQ,UAjCW,UAkCXC,UAAW,MAKXC,EAASd,EAAOS,UAAUhB,EAAQ,EAAGE,EAAS,GAAIF,EAAO,GAAI,CACjEsB,UAAU,EACVJ,SA3Ce,KA6CXK,EAAYhB,EAAOS,UAAUhB,EAAQ,GAAI,GAAIA,EAAO,GAAI,CAC5DsB,UAAU,EACVJ,SA/Ce,KAiDXM,EAAajB,EAAOS,WAAW,GAAId,EAAS,EAAG,GAAIA,EAAQ,CAC/DoB,UAAU,EACVJ,SAnDe,KAqDXO,EAAclB,EAAOS,UAAUhB,EAAQ,GAAIE,EAAS,EAAG,GAAIA,EAAQ,CACvEoB,UAAU,EACVJ,SAvDe,KAyEjB,OAdAZ,EAAMoB,IAAIlB,EAAOV,MAAO,IACnBiB,EACHM,EACAI,EACAF,EACAC,IAIFnB,IAAOI,OAAOkB,IAAInB,GAGlBJ,EAAOuB,IAAIhB,GAEJH,GAiCeoB,CAAahC,EAAQC,SAClC,QACN,IAEI,kBAACtB,EAAD,CAAMsD,IAAKjC","file":"physicsBG-10e5c8e2044b8870ec5e.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport Matter from 'matter-js'\n\nconst Root = styled.div`\n  background-color: #ffffff;\n  position: fixed;\n  overflow: hidden;\n\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n`\n\nconst createEngine = (element) => {\n  const width = window.innerWidth\n  const height = window.innerHeight\n\n  // module aliases\n  const Render = Matter.Render\n  const World = Matter.World\n  const Bodies = Matter.Bodies\n\n  // create an engine\n  const engine = Matter.Engine.create()\n\n  // create a renderer\n  const render = Render.create({\n    element,\n    engine: engine,\n    options: {\n      wireframes: false,\n      width,\n      height,\n      background: '#FFFFFF',\n    },\n  })\n\n  const friction = 0.1\n\n  const boxColor = '#EEEEEE'\n\n  const shapes = [\n    // create two boxes and a ground\n    Bodies.rectangle(width / 2 - 20, 25, 100, 100, {\n      density: 0.1,\n      friction,\n      render: {\n        fillStyle: boxColor,\n        lineWidth: 0,\n      },\n    }),\n    Bodies.rectangle(width / 2 + 20, 120, 80, 80, {\n      density: 0.1,\n      friction,\n      render: {\n        fillStyle: boxColor,\n        lineWidth: 0,\n      },\n    }),\n    Bodies.rectangle(width / 2 - 20, 235, 60, 60, {\n      density: 0.1,\n      friction,\n      render: {\n        fillStyle: boxColor,\n        lineWidth: 0,\n      },\n    }),\n\n    Bodies.rectangle(width / 2 + 20, 320, 120, 120, {\n      density: 0.1,\n      friction,\n      render: {\n        fillStyle: boxColor,\n        lineWidth: 0,\n      },\n    }),\n  ]\n\n  const ground = Bodies.rectangle(width / 2, height + 25, width, 50, {\n    isStatic: true,\n    friction,\n  })\n  const topGround = Bodies.rectangle(width / 2, -25, width, 50, {\n    isStatic: true,\n    friction,\n  })\n  const leftGround = Bodies.rectangle(-25, height / 2, 50, height, {\n    isStatic: true,\n    friction,\n  })\n  const rightGround = Bodies.rectangle(width + 25, height / 2, 50, height, {\n    isStatic: true,\n    friction,\n  })\n\n  // add all of the bodies to the world\n  World.add(engine.world, [\n    ...shapes,\n    ground,\n    rightGround,\n    topGround,\n    leftGround,\n  ])\n\n  // run the engine\n  Matter.Engine.run(engine)\n\n  // run the renderer\n  Render.run(render)\n\n  return engine\n}\n\nconst useGravity = () => {\n  const [gravity, setGravity] = useState([0, 0])\n\n  useEffect(() => {\n    const handleMotion = (event) => {\n      const y = event.accelerationIncludingGravity.y\n      const x = -event.accelerationIncludingGravity.x\n      setGravity([x, y])\n    }\n\n    window.addEventListener('devicemotion', handleMotion, false)\n    return () => {\n      window.removeEventListener('devicemotion', handleMotion)\n    }\n  }, [])\n\n  return gravity\n}\n\nconst Background = () => {\n  const [gravityX, gravityY] = useGravity()\n  const engineRef = useRef()\n  const rootRef = useRef()\n\n  if (engineRef.current) {\n    engineRef.current.world.gravity.y = gravityY / 5\n    engineRef.current.world.gravity.x = gravityX / 5\n  }\n\n  useEffect(() => {\n    engineRef.current = createEngine(rootRef.current)\n    return () => {}\n  }, [])\n\n  return <Root ref={rootRef} />\n}\n\nexport default Background\n"],"sourceRoot":""}