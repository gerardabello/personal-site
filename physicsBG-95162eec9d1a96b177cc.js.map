{"version":3,"sources":["webpack:///./src/physics-background.js"],"names":["Root","styled","div","Background","gravity","setGravity","useState","useEffect","handleMotion","event","y","accelerationIncludingGravity","x","window","addEventListener","removeEventListener","gravityX","gravityY","engineRef","useRef","rootRef","current","world","element","width","height","Render","World","Bodies","engine","render","shapes","ground","topGround","leftGround","rightGround","innerWidth","innerHeight","Matter","Engine","create","options","wireframes","background","rectangle","density","friction","fillStyle","lineWidth","isStatic","add","run","ref"],"mappings":"y6BAIA,IAAMA,EAAOC,IAAOC,IAAV,KAoJKC,UAlBI,WAAM,IAnBA,EAChBC,EAASC,EAkBO,GAnBA,IACOC,mBAAS,CAAC,EAAG,IADpB,GAChBF,EADgB,KACPC,EADO,KAGvBE,qBAAU,WACR,IAAMC,EAAe,SAAAC,GACnB,IAAMC,EAAID,EAAME,6BAA6BD,EACvCE,GAAKH,EAAME,6BAA6BC,EAC9CP,EAAW,CAACO,EAAGF,KAIjB,OADAG,OAAOC,iBAAiB,eAAgBN,GAAc,GAC/C,WACLK,OAAOE,oBAAoB,eAAgBP,MAE5C,IAEIJ,GAGgB,SAChBY,EADgB,KACNC,EADM,KAEjBC,EAAYC,mBACZC,EAAUD,mBAYhB,OAVID,EAAUG,UACZH,EAAUG,QAAQC,MAAMlB,QAAQM,EAAIO,EAAW,EAC/CC,EAAUG,QAAQC,MAAMlB,QAAQQ,EAAII,EAAW,GAGjDT,qBAAU,WAjIS,IAAAgB,EACbC,EACAC,EAGAC,EACAC,EACAC,EAGAC,EAGAC,EAeAC,EAqCAC,EAIAC,EAIAC,EAIAC,EAsDJ,OADAjB,EAAUG,SAlIOE,EAkIgBH,EAAQC,QAjIrCG,EAAQX,OAAOuB,WACfX,EAASZ,OAAOwB,YAGhBX,EAASY,IAAOZ,OAChBC,EAAQW,IAAOX,MACfC,EAASU,IAAOV,OAGhBC,EAASS,IAAOC,OAAOC,SAGvBV,EAASJ,EAAOc,OAAO,CAC3BjB,UACAM,OAAQA,EACRY,QAAS,CACPC,YAAY,EACZlB,QACAC,SACAkB,WAAY,aAQVZ,EAAS,CAEbH,EAAOgB,UAAUpB,EAAQ,EAAI,GAAI,GAAI,IAAK,IAAK,CAC7CqB,QAAS,GACTC,SARa,GASbhB,OAAQ,CACNiB,UARW,UASXC,UAAW,KAGfpB,EAAOgB,UAAUpB,EAAQ,EAAI,GAAI,IAAK,GAAI,GAAI,CAC5CqB,QAAS,GACTC,SAhBa,GAiBbhB,OAAQ,CACNiB,UAhBW,UAiBXC,UAAW,KAGfpB,EAAOgB,UAAUpB,EAAQ,EAAI,GAAI,IAAK,GAAI,GAAI,CAC5CqB,QAAS,GACTC,SAxBa,GAyBbhB,OAAQ,CACNiB,UAxBW,UAyBXC,UAAW,KAIfpB,EAAOgB,UAAUpB,EAAQ,EAAI,GAAI,IAAK,IAAK,IAAK,CAC9CqB,QAAS,GACTC,SAjCa,GAkCbhB,OAAQ,CACNiB,UAjCW,UAkCXC,UAAW,MAKXhB,EAASJ,EAAOgB,UAAUpB,EAAQ,EAAGC,EAAS,GAAID,EAAO,GAAI,CACjEyB,UAAU,EACVH,SA3Ce,KA6CXb,EAAYL,EAAOgB,UAAUpB,EAAQ,GAAI,GAAIA,EAAO,GAAI,CAC5DyB,UAAU,EACVH,SA/Ce,KAiDXZ,EAAaN,EAAOgB,WAAW,GAAInB,EAAS,EAAG,GAAIA,EAAQ,CAC/DwB,UAAU,EACVH,SAnDe,KAqDXX,EAAcP,EAAOgB,UAAUpB,EAAQ,GAAIC,EAAS,EAAG,GAAIA,EAAQ,CACvEwB,UAAU,EACVH,SAvDe,KA2DjBnB,EAAMuB,IAAIrB,EAAOP,MAAjB,UACKS,EADL,CAEEC,EACAG,EACAF,EACAC,KAIFI,IAAOC,OAAOY,IAAItB,GAGlBH,EAAOyB,IAAIrB,GAEJD,GAkCE,eACN,IAEI,kBAAC7B,EAAD,CAAMoD,IAAKhC","file":"physicsBG-95162eec9d1a96b177cc.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport Matter from 'matter-js'\n\nconst Root = styled.div`\n  background-color: #ffffff;\n  position: fixed;\n  overflow: hidden;\n\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n`\n\nconst createEngine = element => {\n  const width = window.innerWidth\n  const height = window.innerHeight\n\n  // module aliases\n  const Render = Matter.Render\n  const World = Matter.World\n  const Bodies = Matter.Bodies\n\n  // create an engine\n  const engine = Matter.Engine.create()\n\n  // create a renderer\n  const render = Render.create({\n    element,\n    engine: engine,\n    options: {\n      wireframes: false,\n      width,\n      height,\n      background: '#FFFFFF'\n    }\n  })\n\n  const friction = 0.1\n\n  const boxColor = '#EEEEEE'\n\n  const shapes = [\n    // create two boxes and a ground\n    Bodies.rectangle(width / 2 - 20, 25, 100, 100, {\n      density: 0.1,\n      friction,\n      render: {\n        fillStyle: boxColor,\n        lineWidth: 0\n      }\n    }),\n    Bodies.rectangle(width / 2 + 20, 120, 80, 80, {\n      density: 0.1,\n      friction,\n      render: {\n        fillStyle: boxColor,\n        lineWidth: 0\n      }\n    }),\n    Bodies.rectangle(width / 2 - 20, 235, 60, 60, {\n      density: 0.1,\n      friction,\n      render: {\n        fillStyle: boxColor,\n        lineWidth: 0\n      }\n    }),\n\n    Bodies.rectangle(width / 2 + 20, 320, 120, 120, {\n      density: 0.1,\n      friction,\n      render: {\n        fillStyle: boxColor,\n        lineWidth: 0\n      }\n    })\n  ]\n\n  const ground = Bodies.rectangle(width / 2, height + 25, width, 50, {\n    isStatic: true,\n    friction\n  })\n  const topGround = Bodies.rectangle(width / 2, -25, width, 50, {\n    isStatic: true,\n    friction\n  })\n  const leftGround = Bodies.rectangle(-25, height / 2, 50, height, {\n    isStatic: true,\n    friction\n  })\n  const rightGround = Bodies.rectangle(width + 25, height / 2, 50, height, {\n    isStatic: true,\n    friction\n  })\n\n  // add all of the bodies to the world\n  World.add(engine.world, [\n    ...shapes,\n    ground,\n    rightGround,\n    topGround,\n    leftGround\n  ])\n\n  // run the engine\n  Matter.Engine.run(engine)\n\n  // run the renderer\n  Render.run(render)\n\n  return engine\n}\n\nconst useGravity = () => {\n  const [gravity, setGravity] = useState([0, 0])\n\n  useEffect(() => {\n    const handleMotion = event => {\n      const y = event.accelerationIncludingGravity.y\n      const x = -event.accelerationIncludingGravity.x\n      setGravity([x, y])\n    }\n\n    window.addEventListener('devicemotion', handleMotion, false)\n    return () => {\n      window.removeEventListener('devicemotion', handleMotion)\n    }\n  }, [])\n\n  return gravity\n}\n\nconst Background = () => {\n  const [gravityX, gravityY] = useGravity()\n  const engineRef = useRef()\n  const rootRef = useRef()\n\n  if (engineRef.current) {\n    engineRef.current.world.gravity.y = gravityY / 5\n    engineRef.current.world.gravity.x = gravityX / 5\n  }\n\n  useEffect(() => {\n    engineRef.current = createEngine(rootRef.current)\n    return () => {}\n  }, [])\n\n  return <Root ref={rootRef} />\n}\n\nexport default Background\n"],"sourceRoot":""}